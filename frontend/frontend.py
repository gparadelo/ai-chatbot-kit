import streamlit as st
import httpx
import os
import time
import uuid
import json

# Page config
st.set_page_config(page_title="AI Chatbot Kit", layout="centered")

# API base URL - read from environment variable
API_BASE_URL = os.getenv("API_URL")
if not API_BASE_URL:
    st.error("API_URL environment variable is not set")
    st.stop()

# Remove trailing slash if present
API_BASE_URL = API_BASE_URL.rstrip('/')

# Construct endpoint URLs
CHAT_ENDPOINT = f"{API_BASE_URL}/api/chat/"

# Streamed response function for API calls
def get_api_response(message, thread_id):
    try:
        with httpx.Client(timeout=60.0) as client:
            response = client.post(
                CHAT_ENDPOINT,
                json={
                    "message": message,
                    "thread_id": thread_id
                }
            )
        
        if response.status_code == 200:
            result = response.json()
            bot_response = result.get("response", "Sorry, I couldn't process that.")
            # Update thread_id in case it was generated by the backend
            returned_thread_id = result.get("thread_id")
            if returned_thread_id:
                st.session_state.thread_id = returned_thread_id
        else:
            bot_response = f"Error: {response.status_code}"
            
    except Exception as e:
        bot_response = f"Connection error: {str(e)}"
    
    # Stream the response word by word
    for word in bot_response.split():
        yield word + " "
        time.sleep(0.05)

# Initialize chat history and thread_id first
if "messages" not in st.session_state:
    st.session_state.messages = []

if "thread_id" not in st.session_state:
    st.session_state.thread_id = str(uuid.uuid4())

st.title("AI Chatbot Kit")

# Add new conversation button in the header area
col1, col2 = st.columns([3, 1])
with col1:
    if st.session_state.messages:
        st.caption(f"ðŸ’¬ {len(st.session_state.messages)} messages in this conversation")
    else:
        st.caption("ðŸ’¡ Start a conversation below")
        
with col2:
    if st.button("ðŸ”„ New Chat", use_container_width=True):
        st.session_state.thread_id = str(uuid.uuid4())
        st.session_state.messages = []
        st.rerun()

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input
if prompt := st.chat_input("What can I help you with?"):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        response = st.write_stream(get_api_response(prompt, st.session_state.thread_id))
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})
